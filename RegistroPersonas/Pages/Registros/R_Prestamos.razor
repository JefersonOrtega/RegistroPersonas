@page "/Prestamos"
@page "/Prestamos/{PrestamoId:int}"

@using Models
@using RegistroPersonas.BLL


@inject IToastService toast


<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div> 
        <div class="card-body">
            <form> 

                @*PrestamoId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PrestamoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Prestamo.PrestamoId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Prestamo.Fecha" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.Fecha)" />
                </div>

                @*PersonaId*@
                <div class="form-group">
                    <label>Persona</label>
                    <InputSelectNumber @bind-Value="Prestamo.PersonaId" class="form-control">
                        <option value="" disabled selected>Seleccione una persona</option>
                        @foreach (var auxiliar in CargarPersonas())
                        {
                            <option value="@auxiliar.PersonaId">@auxiliar.Nombre</option>
                        }
                    </InputSelectNumber>
                    <ValidationMessage For="@(()=>Prestamo.PersonaId)" />
                </div>

                @*Concepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="Prestamo.Concepto" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="Prestamo.Monto" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.Monto)" />
                </div>

                @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber ReadOnly id="Balance" @bind-Value="Prestamo.Balance" class="form-control" />
                </div>
            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: in line-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>

</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

    private Prestamos Prestamo = new Prestamos();

    protected override void OnInitialized()
    {
        Nuevo();

        Buscar();

        CargarPersonas();
    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
    }

    private void Buscar()
    {
        if (Prestamo.PrestamoId > 0)
        {
            var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoId);

            if (encontrado != null)
                this.Prestamo = encontrado;
            else
                toast.ShowWarning("No encontrado");

        }
    }

    public List<Personas> CargarPersonas()
    {
        List<Personas> lista = new List<Personas>();

        try
        {
            lista = PersonasBLL.GetPersonas();
        }
        catch (Exception)
        {
            throw;
        }

        return lista;
    }

    public void Guardar()
    {
        bool guardo;
        guardo = PrestamosBLL.Guardar(Prestamo);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Correctamente");
        }
        else
        {
            toast.ShowError("No fue posible Guardar");
        }
    }

    public void Eliminar()
    {
        bool elimino;
        elimino = PrestamosBLL.Eliminar(Prestamo.PersonaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

}
